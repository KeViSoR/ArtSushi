{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ArtSushi\\\\client.v2\\\\src\\\\pages\\\\AdminProducts.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { fetchAllProducts, deleteProduct } from '../http/catalogAPI.js';\nimport { Button, Container, Spinner, Table, Pagination } from 'react-bootstrap';\nimport CreateProduct from '../components/CreateProduct.js';\nimport UpdateProduct from '../components/UpdateProduct.js'; // количество товаров на страницу. 4 указано для наглядности роботоспособности пагинации\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ADMIN_PER_PAGE = 4;\n\nconst AdminProducts = () => {\n  _s();\n\n  const [products, setProducts] = useState([]); // список загруженных товаров\n\n  const [fetching, setFetching] = useState(true); // загрузка списка товаров с сервера\n\n  const [createShow, setCreateShow] = useState(false); // модальное окно создания товара\n\n  const [updateShow, setUpdateShow] = useState(false); // модальное окно редактирования\n  // для обновления списка после добавления, редактирования, удаления — изменяем состояние\n\n  const [change, setChange] = useState(false); // id товара, который будем редактировать — для передачи в <UpdateProduct id={…} />\n\n  const [product, setProduct] = useState(null); // текущая страница списка товаров\n\n  const [currentPage, setCurrentPage] = useState(1); // сколько всего страниц списка товаров\n\n  const [totalPages, setTotalPages] = useState(1); // обработчик клика по номеру страницы\n\n  const handlePageClick = page => {\n    setCurrentPage(page);\n    setFetching(true);\n  }; // содержимое компонента <Pagination>\n\n\n  const pages = [];\n\n  for (let page = 1; page <= totalPages; page++) {\n    pages.push( /*#__PURE__*/_jsxDEV(Pagination.Item, {\n      active: page === currentPage,\n      activeLabel: \"\",\n      onClick: () => handlePageClick(page),\n      children: page\n    }, page, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this));\n  }\n\n  const handleUpdateClick = id => {\n    setProduct(id);\n    setUpdateShow(true);\n  };\n\n  const handleDeleteClick = id => {\n    deleteProduct(id).then(data => {\n      // если это последняя страница и мы удаляем на ней единственный\n      // оставшийся товар — то надо перейти к предыдущей странице\n      if (totalPages > 1 && products.length === 1 && currentPage === totalPages) {\n        setCurrentPage(currentPage - 1);\n      } else {\n        setChange(!change);\n      }\n\n      alert(`Товар «${data.name}» удален`);\n    }).catch(error => alert(error.response.data.message));\n  };\n\n  useEffect(() => {\n    fetchAllProducts(null, null, currentPage, ADMIN_PER_PAGE).then(data => {\n      setProducts(data.rows);\n      setTotalPages(Math.ceil(data.count / ADMIN_PER_PAGE));\n    }).finally(() => setFetching(false));\n  }, [change, currentPage]);\n\n  if (fetching) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-2\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 9,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: productsFetching ? /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(ProductList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this) // <Container>\n  //     <h1>Товары</h1>\n  //     <Button onClick={() => setCreateShow(true)}>Создать товар</Button>\n  //     <CreateProduct show={createShow} setShow={setCreateShow} setChange={setChange} />\n  //     <UpdateProduct id={product} show={updateShow} setShow={setUpdateShow} setChange={setChange} />\n  //     {products.length > 0 ? (\n  //         <>\n  //             <Table bordered hover size=\"sm\" className=\"mt-3\">\n  //             <thead>\n  //                 <tr>\n  //                     <th>Название</th>\n  //                     <th>Фото</th>\n  //                     <th>Категория</th>\n  //                     <th>Цена</th>\n  //                     <th>Редактировать</th>\n  //                     <th>Удалить</th>\n  //                 </tr>\n  //             </thead>\n  //             <tbody>\n  //                 {products.map(item => \n  //                     <tr key={item.id}>\n  //                         <td>{item.name}</td>\n  //                         <td>\n  //                             {item.image &&\n  //                             <a href={process.env.REACT_APP_IMG_URL + item.image} target=\"_blank\" rel=\"noreferrer\">фото</a>}\n  //                         </td>\n  //                         <td>{item.category?.name || 'NULL'}</td>\n  //                         <td>{item.price}</td>\n  //                         <td>\n  //                             <Button variant=\"success\" size=\"sm\" onClick={() => handleUpdateClick(item.id)}>\n  //                                 Редактировать\n  //                             </Button>\n  //                         </td>\n  //                         <td>\n  //                             <Button variant=\"danger\" size=\"sm\" onClick={() => handleDeleteClick(item.id)}>\n  //                                 Удалить\n  //                             </Button>\n  //                         </td>\n  //                     </tr>\n  //                 )}\n  //             </tbody>\n  //             </Table>\n  //             {totalPages > 1 && <Pagination>{pages}</Pagination>}\n  //         </>\n  //     ) : (\n  //         <p>Список товаров пустой</p>\n  //     )}\n  // </Container>\n  ;\n};\n\n_s(AdminProducts, \"O3wiKZFeFNvxSRPalwdpUsI4Fgc=\");\n\n_c = AdminProducts;\nexport default AdminProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminProducts\");","map":{"version":3,"sources":["C:/Users/User/Desktop/ArtSushi/client.v2/src/pages/AdminProducts.js"],"names":["useState","useEffect","fetchAllProducts","deleteProduct","Button","Container","Spinner","Table","Pagination","CreateProduct","UpdateProduct","ADMIN_PER_PAGE","AdminProducts","products","setProducts","fetching","setFetching","createShow","setCreateShow","updateShow","setUpdateShow","change","setChange","product","setProduct","currentPage","setCurrentPage","totalPages","setTotalPages","handlePageClick","page","pages","push","handleUpdateClick","id","handleDeleteClick","then","data","length","alert","name","catch","error","response","message","rows","Math","ceil","count","finally","productsFetching"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { fetchAllProducts, deleteProduct } from '../http/catalogAPI.js'\nimport { Button, Container, Spinner, Table, Pagination } from 'react-bootstrap'\nimport CreateProduct from '../components/CreateProduct.js'\nimport UpdateProduct from '../components/UpdateProduct.js'\n\n// количество товаров на страницу. 4 указано для наглядности роботоспособности пагинации\nconst ADMIN_PER_PAGE = 4\n\nconst AdminProducts = () => {\n    const [products, setProducts] = useState([]) // список загруженных товаров\n    const [fetching, setFetching] = useState(true) // загрузка списка товаров с сервера\n    const [createShow, setCreateShow] = useState(false) // модальное окно создания товара\n    const [updateShow, setUpdateShow] = useState(false) // модальное окно редактирования\n    \n    // для обновления списка после добавления, редактирования, удаления — изменяем состояние\n    const [change, setChange] = useState(false)\n    // id товара, который будем редактировать — для передачи в <UpdateProduct id={…} />\n    const [product, setProduct] = useState(null)\n\n     // текущая страница списка товаров\n     const [currentPage, setCurrentPage] = useState(1)\n     // сколько всего страниц списка товаров\n     const [totalPages, setTotalPages] = useState(1)\n \n     // обработчик клика по номеру страницы\n     const handlePageClick = (page) => {\n         setCurrentPage(page)\n         setFetching(true)\n     }\n \n     // содержимое компонента <Pagination>\n     const pages = []\n     for (let page = 1; page <= totalPages; page++) {\n         pages.push(\n             <Pagination.Item\n                 key={page}\n                 active={page === currentPage}\n                 activeLabel=\"\"\n                 onClick={() => handlePageClick(page)}\n             >\n                 {page}\n             </Pagination.Item>\n         )\n     }\n \n     const handleUpdateClick = (id) => {\n         setProduct(id)\n         setUpdateShow(true)\n     }\n \n     const handleDeleteClick = (id) => {\n         deleteProduct(id)\n             .then(\n                 data => {\n                     // если это последняя страница и мы удаляем на ней единственный\n                     // оставшийся товар — то надо перейти к предыдущей странице\n                     if (totalPages > 1 && products.length === 1 && currentPage === totalPages) {\n                         setCurrentPage(currentPage - 1)\n                     } else {\n                         setChange(!change)\n                     }\n                     alert(`Товар «${data.name}» удален`)\n                 }\n             )\n             .catch(\n                 error => alert(error.response.data.message)\n             )\n     }\n \n     useEffect(() => {\n         fetchAllProducts(null, null, currentPage, ADMIN_PER_PAGE)\n             .then(\n                 data => {\n                     setProducts(data.rows)\n                     setTotalPages(Math.ceil(data.count / ADMIN_PER_PAGE))\n                 }\n             )\n             .finally(\n                 () => setFetching(false)\n             )\n     }, [change, currentPage])\n \n     if (fetching) {\n         return <Spinner animation=\"border\" />\n     }\n\n    return (\n        <Container>\n            <Row className=\"mt-2\">\n                <Col md={9}>\n                    <div>\n                        {productsFetching ? (\n                            <Spinner animation=\"border\" />\n                        ) : (\n                            <ProductList />\n                        )}\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n        // <Container>\n        //     <h1>Товары</h1>\n        //     <Button onClick={() => setCreateShow(true)}>Создать товар</Button>\n        //     <CreateProduct show={createShow} setShow={setCreateShow} setChange={setChange} />\n        //     <UpdateProduct id={product} show={updateShow} setShow={setUpdateShow} setChange={setChange} />\n        //     {products.length > 0 ? (\n        //         <>\n        //             <Table bordered hover size=\"sm\" className=\"mt-3\">\n        //             <thead>\n        //                 <tr>\n        //                     <th>Название</th>\n        //                     <th>Фото</th>\n        //                     <th>Категория</th>\n        //                     <th>Цена</th>\n        //                     <th>Редактировать</th>\n        //                     <th>Удалить</th>\n        //                 </tr>\n        //             </thead>\n        //             <tbody>\n        //                 {products.map(item => \n        //                     <tr key={item.id}>\n        //                         <td>{item.name}</td>\n        //                         <td>\n        //                             {item.image &&\n        //                             <a href={process.env.REACT_APP_IMG_URL + item.image} target=\"_blank\" rel=\"noreferrer\">фото</a>}\n        //                         </td>\n        //                         <td>{item.category?.name || 'NULL'}</td>\n        //                         <td>{item.price}</td>\n        //                         <td>\n        //                             <Button variant=\"success\" size=\"sm\" onClick={() => handleUpdateClick(item.id)}>\n        //                                 Редактировать\n        //                             </Button>\n        //                         </td>\n        //                         <td>\n        //                             <Button variant=\"danger\" size=\"sm\" onClick={() => handleDeleteClick(item.id)}>\n        //                                 Удалить\n        //                             </Button>\n        //                         </td>\n        //                     </tr>\n        //                 )}\n        //             </tbody>\n        //             </Table>\n        //             {totalPages > 1 && <Pagination>{pages}</Pagination>}\n        //         </>\n        //     ) : (\n        //         <p>Список товаров пустой</p>\n        //     )}\n        // </Container>\n    )\n}\n\nexport default AdminProducts"]},"metadata":{},"sourceType":"module"}